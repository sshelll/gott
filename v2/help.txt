Gott is a alternative to 'go test' command, it can help you to choose a specific test to run
with UI.

Also, it has some useful features, such as:
        -find the closest test func by byte pos
        -find all tests in a go test file

If you want to use it as a interactive test runner with UI, just try 'gott [go test args]'!
For example:
        gott -v ==> go test -v
        gott -race ==> go test -race
        gott -v -race ==> go test -v -race

If you want to use it to find / exec tests without UI, I mean if you wish to treat it
like 'github.com/josharian/impl', please check the Usage below.

For more detail please visit 'https://github.com/sshelll/gott'. Have fun with gott!

----------------------------------------------------------------------------------------------

Usage of Gott:
  -file string
        filepath of a go test file

        NOTE: if the path is not start with '/', then the final file path would be './file'

        [EXAMPLE 1]:
                'gott -file=/Users/sshelll/go/src/xx_test.go'
                this will exec all tests in the file
        [EXAMPLE 2]:
                'gott -file=xx_test.go -v -race'
                this will exec all tests in './xx_test.go' with -v -race flags

  -pos string
        byte pos of a test file, this flag should be used with '-file'

        [EXAMPLE 1]:
                'gott -pos=104 -file=/Users/sshelll/go/src/xx_test.go'
                this will exec the closest test to the 104(byte pos) in the file xx_test.go

        [EXAMPLE 2]:
                'gott -pos=235 -file=/Users/sshelll/go/src/xx_test.go -v -race'
                this will exec the closest test to the 235(byte pos) in the file xx_test.go
        with -v -race flags

  -print
        print the result instead of exec

        [EXAMPLE 1]:
                'gott -print -pos=104 -file=xx_test.go'
                this will print the closest test name instead of exec it

        [EXAMPLE 2]:
                'gott -print -file=xx_test.go'
                this will print name of all tests in the file instead of exec them

  -sub
        get all tests of a file(including sub-tests), this flag must be used
        with '-print' and '-file'

        For Example, if you got a test file like this:

        // package test
        //
        // import (
        //      "testing"
        //      "github.com/stretchr/testify/suite"
        // )
        //
        // func TestXxx(t *testing.T) {
        //      println("hello world")
        // }
        //
        // type FooTestSuite struct {
        //      suite.Suite
        // }
        //
        // func TestFoo(t *testing.T) {
        //      testifySuite.Run(t, &FooTestSuite{})
        // }
        //
        // func (*FooTestSuite) TestCase() {
        //
        // }

        'gott -print -file=xx_test.go' will only print 'TestXXX' and 'TestFoo' for you,
        'gott -print -file=xx_test.go -sub' will print both of them and 'TestFoo/TestCase'.

  -version
        print version of gott
        NOTE: please use 'gott -version' or 'gott --version', 'gott -v' will be treated as 'go test -v'
